---
title: 'Greenspace exposure: Finding nearby parks and distance to nearest park'
author: Silvia CanelÃ³n
date: '2024-12-04'
image: featured.png
categories:
  - R
  - tutorial
  - greenspace
  - maps
  - rspatial
  - sf
  - mapview
subtitle: >
  An R tutorial on finding nearby vector polygons using spatial tools.
description: '' # Text that shows below the tags, not on listing page
links:
- icon: pin-map-fill
  name: Collection of maps
  url: /project/2024-06-16-ccd-sips
draft: true
---


## Notes

- [GitHub - ivelasq/leaidr: An R Package for U.S. School District Shapefiles](https://github.com/ivelasq/leaidr) -- school district shape files
- [9 Walkthrough 3: Using school-level aggregate data to illuminate educational inequities | Data Science in Education Using R](https://datascienceineducation.com/c09#data-sources-2) - data sources for aggregate datasets related to education
- [GitHub - data-edu/dataedu: An R package associated with the Data Science in Education Using R book](https://github.com/data-edu/dataedu) - Data Edu package
- [Schools Parcels - OpenDataPhilly](https://opendataphilly.org/datasets/schools-parcels/)
- [Schools - OpenDataPhilly](https://opendataphilly.org/datasets/schools/)
- [PPR Tree Canopy - OpenDataPhilly](https://opendataphilly.org/datasets/ppr-tree-canopy/)
- [OSF | PAD-US-AR](https://osf.io/pwdsg/)
- Research:
  - [Urban Greenspaces: Bridging Mental Health Disparities | US Forest Service Research and Development](https://research.fs.usda.gov/nrs/projects/urbangreenspaces#research) - "Researchers found that higher levels of residential tree cover, particularly within a 250-meter radius of an individuals' home, were associated with significantly better mental health. "

```{r setup}
#| include: false
library(tidyverse)
library(sf)
library(mapview)

data_dir <- "/Users/scanelon/Sync/Repos/3-Resources/Data"
```

```{r import}
#| include: false

zips <- read_sf(paste(data_dir, "raw", "Open Data Philly", "city-boundaries", "zipcodes.geojson", sep = "/"))

schools <- read_sf(paste(data_dir, "raw", "Open Data Philly", "schools", "schools_parcels.geojson", sep = "/"))

parks <- read_sf(paste(data_dir, "raw", "Open Data Philly", "parks", "PPR_Properties.geojson", sep = "/"))

```

```{r}
#| include: false
philly <- st_union(zips) |> st_as_sf()

schools <- schools |> 
  mutate(across(.cols = c(TYPE, TYPE_SPECIFIC),
                .fns = factor)) |> 
  mutate(TYPE = fct_recode(TYPE,
                           "PUBLIC" = "1",
                           "CHARTER" = "2",
                           "PRIVATE" = "3"))
```

```{r}
#| include: false

mapview(philly)
mapview(parks, col.region = "blue") + mapview(schools, zcol = "type")
```

## Wrangling

```{r wrangling}
# renaming variables ---
schools <- schools |> 
  janitor::clean_names() |> 
  rename(school_id = objectid) |> 
  select(school_id, school_name_label, 
         school_address = street_address, zip_code, 
         grade_level, grade_org, enrollment, 
         type, type_specific, geometry)

parks <- parks |> 
  janitor::clean_names() |> 
  rename(park_id = objectid) |> 
  select(park_id, public_name, 
         park_address = address_brt,
         property_classification, geometry)
  
# CRS projections ----
philly <- philly |> st_transform(crs = "EPSG:6564")
schools <- schools |> st_transform(crs = "EPSG:6564")
parks <- parks |> st_transform(crs = "EPSG:6564")
```

## Number of nearby parks

- counting unique parks. so if there are 3 unique parks nested within a "parent" park, all 3 are counted

```{r}
# find parks within a specific buffer size in meters ----

buffer_size <- 250 # meters

nearby_parks <-
  st_join(x = schools,
          y = parks,
          join = st_is_within_distance,
          dist = buffer_size)

# count number of parks within a specific buffer size in meters ----

schools_with_nearby_parks <-
  nearby_parks |> 
  group_by(school_id) |> 
  mutate(number_parks = if_else(
    !is.na(park_id),
    n_distinct(park_id),
    0)) |> 
  ungroup() |> 
  mutate(
    number_parks_binary = if_else(
      number_parks == 0,
      "No",
      "Yes"),
    number_parks_binary = fct(
      number_parks_binary,
      levels = c("No", "Yes"))
    ) |> 
  # one record per school
  select(c(school_id:type_specific, 
         number_parks, number_parks_binary)) |> 
  distinct()

```

## Distance to nearest park

```{r sandbox}
test_schools <- schools |> head(3)
test_parks <- parks |> head(5)

# for each school, find index of nearest park (e.g. 1 5 1)
nearest <- st_nearest_feature(test_schools, test_parks)

# create park subset from the nearest park indices
test2 <- test_parks[st_nearest_feature(test_schools, test_parks),]
# test3 <- test_parks |> filter(row_number() %in% nearest)

# combine the school dataset with the park subset
# using mutate with a dataframe skips the y variables 
# that are already in x
# mutate creates new columns from y
test4 <- test_schools |> mutate(test2)

```


```{r}
# Distance to nearest park --------------------------------------
 
# find closest park to school (using indexes)
nearest_park <- schools |>
  mutate(parks[st_nearest_feature(schools, parks),])

# find distance to closest park
nearest_park_distance <- nearest_park |> 
  mutate(distance = st_distance(schools, nearest_park, 
                                by_element = TRUE))

# join back with school info
schools_with_parks <-
  schools_with_nearby_parks |>
  # add distance to park variable
  mutate(distance_to_nearest_park = 
           as.numeric(nearest_park_distance$distance),
         .before = geometry) |> 
  # if school is 0m from nearest park, adjust to 1m
  mutate(
    distance_to_nearest_park = if_else(
      distance_to_nearest_park == 0, 
      1, 
      distance_to_nearest_park),
    .before = geometry)
```

## Summary

```{r}
schools_with_parks |> 
  st_drop_geometry() |> 
  gtsummary::tbl_summary(
    include = c(number_parks, 
                number_parks_binary, 
                distance_to_nearest_park),
    by = type,
    type = list(
      c(number_parks, distance_to_nearest_park) ~ "continuous2"
    ),
    statistic = list(
      c(number_parks, distance_to_nearest_park) ~ c(
        "{mean} ({sd})",
        "{median} ({min}, {max})")
    )
  ) |> 
  gtsummary::add_overall() |> 
  gtsummary::add_p()

summary(schools_with_parks$number_parks)
```


```{r export}
#| include: false

st_write(obj = schools,
         dsn = paste(data_dir, "clean", "Open Data Philly", "schools", "schools_parcels.gpkg", sep = "/"))
```

